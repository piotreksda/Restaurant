name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v3
#     - name: Setup .NET
#       uses: actions/setup-dotnet@v3
#       with:
#         dotnet-version: 7.0.x
#     - name: Restore dependencies
#       run: dotnet restore
#     - name: Build
#       run: dotnet build --no-restore
#     - name: Copy out file from volume
#       run: |
#         sudo cp /var/lib/docker/volumes/example_reports/_data/test.txt /home/buildfolder
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v3.1.2
#       with:
#         name: build-artifact
#         path: .
#         if-no-files-found: error

  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write
      issues: read
      pull-requests: write
    services:
      sql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: zaq1@WSX
          ACCEPT_EULA: Y
        ports:
        - 1433:1433

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
#     - name: Download a Build Artifact
#       uses: actions/download-artifact@v3.0.2
#       with:
#         name: build-artifact
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
    
    - name: Install dockerize
      run: |
        wget https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz
        tar -xzvf dockerize-linux-amd64-v0.6.1.tar.gz
        sudo mv dockerize /usr/local/bin/
        
    - name: Wait for SQL Server to be ready
      run: |
        dockerize -wait tcp://localhost:1433 -timeout 1m

    - name: Test
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=MyDb;User Id=sa;Password=zaq1@WSX;Encrypt=False;"
      run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" || true
    - name: Test Report
      uses: dorny/test-reporter@v1.6.0
      with:
        name: DotNet Tests
        path: "**/test-results.trx"
        reporter: dotnet-trx
        # TestResults/TestResult/test-results.trx
  CodeQuality-Raport:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
      checks: write
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarScanner for .NET 7 with pull request decoration support
      uses: highbyte/sonarscan-dotnet@v2.2.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        # The key of the SonarQube project
        sonarProjectKey: piotreksda_Restaurant
        # The name of the SonarQube project
        sonarProjectName:  Restaurant
        # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
        sonarOrganization: piotreksda
        dotnetDisableTests: true
  #         # Optional command arguments to dotnet test
  #         dotnetTestArguments: --no-build --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  #         # Optional extra command arguments the the SonarScanner 'begin' command
  #         sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

